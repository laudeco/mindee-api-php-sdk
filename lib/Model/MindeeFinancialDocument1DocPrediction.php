<?php
/**
 * MindeeFinancialDocument1DocPrediction
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Financial Document
 *
 * Financial Document endpoints
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * MindeeFinancialDocument1DocPrediction Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class MindeeFinancialDocument1DocPrediction implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MindeeFinancial_Document1DocPrediction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'category' => '\OpenAPI\Client\Model\Category',
        'customer_address' => '\OpenAPI\Client\Model\CustomerAddress',
        'customer_company_registrations' => '\OpenAPI\Client\Model\CustomerCompanyRegistrationsInner[]',
        'customer_name' => '\OpenAPI\Client\Model\CustomerName',
        'date' => '\OpenAPI\Client\Model\DateOfIssue',
        'document_type' => '\OpenAPI\Client\Model\DocumentTypeBeta',
        'due_date' => '\OpenAPI\Client\Model\DueDate',
        'invoice_number' => '\OpenAPI\Client\Model\InvoiceNumber',
        'line_items' => '\OpenAPI\Client\Model\LineItemsInner[]',
        'locale' => '\OpenAPI\Client\Model\Locale',
        'reference_numbers' => '\OpenAPI\Client\Model\ReferenceNumbersInner[]',
        'subcategory' => '\OpenAPI\Client\Model\SubCategory',
        'supplier_address' => '\OpenAPI\Client\Model\SupplierAddress',
        'supplier_company_registrations' => '\OpenAPI\Client\Model\SupplierCompanyRegistrationsInner[]',
        'supplier_name' => '\OpenAPI\Client\Model\SupplierName',
        'supplier_payment_details' => '\OpenAPI\Client\Model\SupplierPaymentDetailsInner[]',
        'taxes' => '\OpenAPI\Client\Model\TaxesInner[]',
        'time' => '\OpenAPI\Client\Model\PurchaseTime',
        'tip' => '\OpenAPI\Client\Model\TipAndGratuity',
        'total_amount' => '\OpenAPI\Client\Model\TotalAmountIncludingTaxesTipsFeesAndOtherCharges',
        'total_net' => '\OpenAPI\Client\Model\TotalNetOfTaxesFeesAndDiscount',
        'total_tax' => '\OpenAPI\Client\Model\TotalTax'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'category' => null,
        'customer_address' => null,
        'customer_company_registrations' => null,
        'customer_name' => null,
        'date' => null,
        'document_type' => null,
        'due_date' => null,
        'invoice_number' => null,
        'line_items' => null,
        'locale' => null,
        'reference_numbers' => null,
        'subcategory' => null,
        'supplier_address' => null,
        'supplier_company_registrations' => null,
        'supplier_name' => null,
        'supplier_payment_details' => null,
        'taxes' => null,
        'time' => null,
        'tip' => null,
        'total_amount' => null,
        'total_net' => null,
        'total_tax' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'category' => false,
		'customer_address' => false,
		'customer_company_registrations' => false,
		'customer_name' => false,
		'date' => false,
		'document_type' => false,
		'due_date' => false,
		'invoice_number' => false,
		'line_items' => false,
		'locale' => false,
		'reference_numbers' => false,
		'subcategory' => false,
		'supplier_address' => false,
		'supplier_company_registrations' => false,
		'supplier_name' => false,
		'supplier_payment_details' => false,
		'taxes' => false,
		'time' => false,
		'tip' => false,
		'total_amount' => false,
		'total_net' => false,
		'total_tax' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    public function customerAddress():CustomerAddress
    {
        return $this->getCustomerAddress()?: new CustomerAddress();
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'category' => 'category',
        'customer_address' => 'customer_address',
        'customer_company_registrations' => 'customer_company_registrations',
        'customer_name' => 'customer_name',
        'date' => 'date',
        'document_type' => 'document_type',
        'due_date' => 'due_date',
        'invoice_number' => 'invoice_number',
        'line_items' => 'line_items',
        'locale' => 'locale',
        'reference_numbers' => 'reference_numbers',
        'subcategory' => 'subcategory',
        'supplier_address' => 'supplier_address',
        'supplier_company_registrations' => 'supplier_company_registrations',
        'supplier_name' => 'supplier_name',
        'supplier_payment_details' => 'supplier_payment_details',
        'taxes' => 'taxes',
        'time' => 'time',
        'tip' => 'tip',
        'total_amount' => 'total_amount',
        'total_net' => 'total_net',
        'total_tax' => 'total_tax'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'category' => 'setCategory',
        'customer_address' => 'setCustomerAddress',
        'customer_company_registrations' => 'setCustomerCompanyRegistrations',
        'customer_name' => 'setCustomerName',
        'date' => 'setDate',
        'document_type' => 'setDocumentType',
        'due_date' => 'setDueDate',
        'invoice_number' => 'setInvoiceNumber',
        'line_items' => 'setLineItems',
        'locale' => 'setLocale',
        'reference_numbers' => 'setReferenceNumbers',
        'subcategory' => 'setSubcategory',
        'supplier_address' => 'setSupplierAddress',
        'supplier_company_registrations' => 'setSupplierCompanyRegistrations',
        'supplier_name' => 'setSupplierName',
        'supplier_payment_details' => 'setSupplierPaymentDetails',
        'taxes' => 'setTaxes',
        'time' => 'setTime',
        'tip' => 'setTip',
        'total_amount' => 'setTotalAmount',
        'total_net' => 'setTotalNet',
        'total_tax' => 'setTotalTax'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'category' => 'getCategory',
        'customer_address' => 'getCustomerAddress',
        'customer_company_registrations' => 'getCustomerCompanyRegistrations',
        'customer_name' => 'getCustomerName',
        'date' => 'getDate',
        'document_type' => 'getDocumentType',
        'due_date' => 'getDueDate',
        'invoice_number' => 'getInvoiceNumber',
        'line_items' => 'getLineItems',
        'locale' => 'getLocale',
        'reference_numbers' => 'getReferenceNumbers',
        'subcategory' => 'getSubcategory',
        'supplier_address' => 'getSupplierAddress',
        'supplier_company_registrations' => 'getSupplierCompanyRegistrations',
        'supplier_name' => 'getSupplierName',
        'supplier_payment_details' => 'getSupplierPaymentDetails',
        'taxes' => 'getTaxes',
        'time' => 'getTime',
        'tip' => 'getTip',
        'total_amount' => 'getTotalAmount',
        'total_net' => 'getTotalNet',
        'total_tax' => 'getTotalTax'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('category', $data ?? [], null);
        $this->setIfExists('customer_address', $data ?? [], null);
        $this->setIfExists('customer_company_registrations', $data ?? [], null);
        $this->setIfExists('customer_name', $data ?? [], null);
        $this->setIfExists('date', $data ?? [], null);
        $this->setIfExists('document_type', $data ?? [], null);
        $this->setIfExists('due_date', $data ?? [], null);
        $this->setIfExists('invoice_number', $data ?? [], null);
        $this->setIfExists('line_items', $data ?? [], null);
        $this->setIfExists('locale', $data ?? [], null);
        $this->setIfExists('reference_numbers', $data ?? [], null);
        $this->setIfExists('subcategory', $data ?? [], null);
        $this->setIfExists('supplier_address', $data ?? [], null);
        $this->setIfExists('supplier_company_registrations', $data ?? [], null);
        $this->setIfExists('supplier_name', $data ?? [], null);
        $this->setIfExists('supplier_payment_details', $data ?? [], null);
        $this->setIfExists('taxes', $data ?? [], null);
        $this->setIfExists('time', $data ?? [], null);
        $this->setIfExists('tip', $data ?? [], null);
        $this->setIfExists('total_amount', $data ?? [], null);
        $this->setIfExists('total_net', $data ?? [], null);
        $this->setIfExists('total_tax', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets category
     *
     * @return \OpenAPI\Client\Model\Category|null
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param \OpenAPI\Client\Model\Category|null $category category
     *
     * @return self
     */
    public function setCategory($category)
    {
        if (is_null($category)) {
            throw new \InvalidArgumentException('non-nullable category cannot be null');
        }
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets customer_address
     *
     * @return \OpenAPI\Client\Model\CustomerAddress|null
     */
    public function getCustomerAddress()
    {
        return $this->container['customer_address'];
    }

    /**
     * Sets customer_address
     *
     * @param \OpenAPI\Client\Model\CustomerAddress|null $customer_address customer_address
     *
     * @return self
     */
    public function setCustomerAddress($customer_address)
    {
        if (is_null($customer_address)) {
            throw new \InvalidArgumentException('non-nullable customer_address cannot be null');
        }
        $this->container['customer_address'] = $customer_address;

        return $this;
    }

    /**
     * Gets customer_company_registrations
     *
     * @return \OpenAPI\Client\Model\CustomerCompanyRegistrationsInner[]|null
     */
    public function getCustomerCompanyRegistrations()
    {
        return $this->container['customer_company_registrations'];
    }

    /**
     * Sets customer_company_registrations
     *
     * @param \OpenAPI\Client\Model\CustomerCompanyRegistrationsInner[]|null $customer_company_registrations customer_company_registrations
     *
     * @return self
     */
    public function setCustomerCompanyRegistrations($customer_company_registrations)
    {
        if (is_null($customer_company_registrations)) {
            throw new \InvalidArgumentException('non-nullable customer_company_registrations cannot be null');
        }
        $this->container['customer_company_registrations'] = $customer_company_registrations;

        return $this;
    }

    /**
     * Gets customer_name
     *
     * @return \OpenAPI\Client\Model\CustomerName|null
     */
    public function getCustomerName()
    {
        return $this->container['customer_name'];
    }

    public function customerName():CustomerName{
        return $this->container['customer_name']?: new CustomerName();
    }

    /**
     * Sets customer_name
     *
     * @param \OpenAPI\Client\Model\CustomerName|null $customer_name customer_name
     *
     * @return self
     */
    public function setCustomerName($customer_name)
    {
        if (is_null($customer_name)) {
            throw new \InvalidArgumentException('non-nullable customer_name cannot be null');
        }
        $this->container['customer_name'] = $customer_name;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \OpenAPI\Client\Model\DateOfIssue|null
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \OpenAPI\Client\Model\DateOfIssue|null $date date
     *
     * @return self
     */
    public function setDate($date)
    {
        if (is_null($date)) {
            throw new \InvalidArgumentException('non-nullable date cannot be null');
        }
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets document_type
     *
     * @return \OpenAPI\Client\Model\DocumentTypeBeta|null
     */
    public function getDocumentType()
    {
        return $this->container['document_type'];
    }

    /**
     * Sets document_type
     *
     * @param \OpenAPI\Client\Model\DocumentTypeBeta|null $document_type document_type
     *
     * @return self
     */
    public function setDocumentType($document_type)
    {
        if (is_null($document_type)) {
            throw new \InvalidArgumentException('non-nullable document_type cannot be null');
        }
        $this->container['document_type'] = $document_type;

        return $this;
    }

    /**
     * Gets due_date
     *
     * @return \OpenAPI\Client\Model\DueDate|null
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param \OpenAPI\Client\Model\DueDate|null $due_date due_date
     *
     * @return self
     */
    public function setDueDate($due_date)
    {
        if (is_null($due_date)) {
            throw new \InvalidArgumentException('non-nullable due_date cannot be null');
        }
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets invoice_number
     *
     * @return \OpenAPI\Client\Model\InvoiceNumber|null
     */
    public function getInvoiceNumber()
    {
        return $this->container['invoice_number'];
    }

    /**
     * Sets invoice_number
     *
     * @param \OpenAPI\Client\Model\InvoiceNumber|null $invoice_number invoice_number
     *
     * @return self
     */
    public function setInvoiceNumber($invoice_number)
    {
        if (is_null($invoice_number)) {
            throw new \InvalidArgumentException('non-nullable invoice_number cannot be null');
        }
        $this->container['invoice_number'] = $invoice_number;

        return $this;
    }

    /**
     * Gets line_items
     *
     * @return \OpenAPI\Client\Model\LineItemsInner[]|null
     */
    public function getLineItems()
    {
        return $this->container['line_items'];
    }

    /**
     * Sets line_items
     *
     * @param \OpenAPI\Client\Model\LineItemsInner[]|null $line_items line_items
     *
     * @return self
     */
    public function setLineItems($line_items)
    {
        if (is_null($line_items)) {
            throw new \InvalidArgumentException('non-nullable line_items cannot be null');
        }
        $this->container['line_items'] = $line_items;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return \OpenAPI\Client\Model\Locale|null
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param \OpenAPI\Client\Model\Locale|null $locale locale
     *
     * @return self
     */
    public function setLocale($locale)
    {
        if (is_null($locale)) {
            throw new \InvalidArgumentException('non-nullable locale cannot be null');
        }
        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets reference_numbers
     *
     * @return \OpenAPI\Client\Model\ReferenceNumbersInner[]|null
     */
    public function getReferenceNumbers()
    {
        return $this->container['reference_numbers'];
    }

    /**
     * Sets reference_numbers
     *
     * @param \OpenAPI\Client\Model\ReferenceNumbersInner[]|null $reference_numbers reference_numbers
     *
     * @return self
     */
    public function setReferenceNumbers($reference_numbers)
    {
        if (is_null($reference_numbers)) {
            throw new \InvalidArgumentException('non-nullable reference_numbers cannot be null');
        }
        $this->container['reference_numbers'] = $reference_numbers;

        return $this;
    }

    /**
     * Gets subcategory
     *
     * @return \OpenAPI\Client\Model\SubCategory|null
     */
    public function getSubcategory()
    {
        return $this->container['subcategory'];
    }

    /**
     * Sets subcategory
     *
     * @param \OpenAPI\Client\Model\SubCategory|null $subcategory subcategory
     *
     * @return self
     */
    public function setSubcategory($subcategory)
    {
        if (is_null($subcategory)) {
            throw new \InvalidArgumentException('non-nullable subcategory cannot be null');
        }
        $this->container['subcategory'] = $subcategory;

        return $this;
    }

    /**
     * Gets supplier_address
     *
     * @return \OpenAPI\Client\Model\SupplierAddress|null
     */
    public function getSupplierAddress()
    {
        return $this->container['supplier_address'];
    }

    /**
     * Sets supplier_address
     *
     * @param \OpenAPI\Client\Model\SupplierAddress|null $supplier_address supplier_address
     *
     * @return self
     */
    public function setSupplierAddress($supplier_address)
    {
        if (is_null($supplier_address)) {
            throw new \InvalidArgumentException('non-nullable supplier_address cannot be null');
        }
        $this->container['supplier_address'] = $supplier_address;

        return $this;
    }

    /**
     * Gets supplier_company_registrations
     *
     * @return \OpenAPI\Client\Model\SupplierCompanyRegistrationsInner[]|null
     */
    public function getSupplierCompanyRegistrations()
    {
        return $this->container['supplier_company_registrations'];
    }

    /**
     * Sets supplier_company_registrations
     *
     * @param \OpenAPI\Client\Model\SupplierCompanyRegistrationsInner[]|null $supplier_company_registrations supplier_company_registrations
     *
     * @return self
     */
    public function setSupplierCompanyRegistrations($supplier_company_registrations)
    {
        if (is_null($supplier_company_registrations)) {
            throw new \InvalidArgumentException('non-nullable supplier_company_registrations cannot be null');
        }
        $this->container['supplier_company_registrations'] = $supplier_company_registrations;

        return $this;
    }

    /**
     * Gets supplier_name
     *
     * @return \OpenAPI\Client\Model\SupplierName|null
     */
    public function getSupplierName()
    {
        return $this->container['supplier_name'];
    }

    /**
     * Sets supplier_name
     *
     * @param \OpenAPI\Client\Model\SupplierName|null $supplier_name supplier_name
     *
     * @return self
     */
    public function setSupplierName($supplier_name)
    {
        if (is_null($supplier_name)) {
            throw new \InvalidArgumentException('non-nullable supplier_name cannot be null');
        }
        $this->container['supplier_name'] = $supplier_name;

        return $this;
    }

    /**
     * Gets supplier_payment_details
     *
     * @return \OpenAPI\Client\Model\SupplierPaymentDetailsInner[]|null
     */
    public function getSupplierPaymentDetails()
    {
        return $this->container['supplier_payment_details'];
    }

    /**
     * Sets supplier_payment_details
     *
     * @param \OpenAPI\Client\Model\SupplierPaymentDetailsInner[]|null $supplier_payment_details supplier_payment_details
     *
     * @return self
     */
    public function setSupplierPaymentDetails($supplier_payment_details)
    {
        if (is_null($supplier_payment_details)) {
            throw new \InvalidArgumentException('non-nullable supplier_payment_details cannot be null');
        }
        $this->container['supplier_payment_details'] = $supplier_payment_details;

        return $this;
    }

    /**
     * Gets taxes
     *
     * @return \OpenAPI\Client\Model\TaxesInner[]|null
     */
    public function getTaxes()
    {
        return $this->container['taxes'];
    }

    /**
     * Sets taxes
     *
     * @param \OpenAPI\Client\Model\TaxesInner[]|null $taxes taxes
     *
     * @return self
     */
    public function setTaxes($taxes)
    {
        if (is_null($taxes)) {
            throw new \InvalidArgumentException('non-nullable taxes cannot be null');
        }
        $this->container['taxes'] = $taxes;

        return $this;
    }

    /**
     * Gets time
     *
     * @return \OpenAPI\Client\Model\PurchaseTime|null
     */
    public function getTime()
    {
        return $this->container['time'];
    }

    /**
     * Sets time
     *
     * @param \OpenAPI\Client\Model\PurchaseTime|null $time time
     *
     * @return self
     */
    public function setTime($time)
    {
        if (is_null($time)) {
            throw new \InvalidArgumentException('non-nullable time cannot be null');
        }
        $this->container['time'] = $time;

        return $this;
    }

    /**
     * Gets tip
     *
     * @return \OpenAPI\Client\Model\TipAndGratuity|null
     */
    public function getTip()
    {
        return $this->container['tip'];
    }

    /**
     * Sets tip
     *
     * @param \OpenAPI\Client\Model\TipAndGratuity|null $tip tip
     *
     * @return self
     */
    public function setTip($tip)
    {
        if (is_null($tip)) {
            throw new \InvalidArgumentException('non-nullable tip cannot be null');
        }
        $this->container['tip'] = $tip;

        return $this;
    }

    /**
     * Gets total_amount
     *
     * @return \OpenAPI\Client\Model\TotalAmountIncludingTaxesTipsFeesAndOtherCharges|null
     */
    public function getTotalAmount()
    {
        return $this->container['total_amount'];
    }

    /**
     * Sets total_amount
     *
     * @param \OpenAPI\Client\Model\TotalAmountIncludingTaxesTipsFeesAndOtherCharges|null $total_amount total_amount
     *
     * @return self
     */
    public function setTotalAmount($total_amount)
    {
        if (is_null($total_amount)) {
            throw new \InvalidArgumentException('non-nullable total_amount cannot be null');
        }
        $this->container['total_amount'] = $total_amount;

        return $this;
    }

    /**
     * Gets total_net
     *
     * @return \OpenAPI\Client\Model\TotalNetOfTaxesFeesAndDiscount|null
     */
    public function getTotalNet()
    {
        return $this->container['total_net'];
    }

    /**
     * Sets total_net
     *
     * @param \OpenAPI\Client\Model\TotalNetOfTaxesFeesAndDiscount|null $total_net total_net
     *
     * @return self
     */
    public function setTotalNet($total_net)
    {
        if (is_null($total_net)) {
            throw new \InvalidArgumentException('non-nullable total_net cannot be null');
        }
        $this->container['total_net'] = $total_net;

        return $this;
    }

    /**
     * Gets total_tax
     *
     * @return \OpenAPI\Client\Model\TotalTax|null
     */
    public function getTotalTax()
    {
        return $this->container['total_tax'];
    }

    /**
     * Sets total_tax
     *
     * @param \OpenAPI\Client\Model\TotalTax|null $total_tax total_tax
     *
     * @return self
     */
    public function setTotalTax($total_tax)
    {
        if (is_null($total_tax)) {
            throw new \InvalidArgumentException('non-nullable total_tax cannot be null');
        }
        $this->container['total_tax'] = $total_tax;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


